#+hugo_base_dir: ~/ssds/Projets/Hugo/quickstart2/

#+seq_todo: TODO DRAFT DONE
#+seq_todo: TEST__TODO | TEST__DONE

#+property: header-args :eval never-export

#+startup: indent

#+macro: doc [[https://ox-hugo.scripter.co/doc/$1][$2]]
#+macro: oxhugoissue =ox-hugo= Issue #[[https://github.com/kaushalmodi/ox-hugo/issues/$1][$1]]
#+macro: hugoissue =hugo= Issue #[[https://github.com/gohugoio/hugo/issues/$1][$1]]
#+macro: hugopr =hugo= PR #[[https://github.com/gohugoio/hugo/pull/$1][$1]]
#+macro: bfissue /Blackfriday/ Issue #[[https://github.com/russross/blackfriday/issues/$1][$1]]
#+macro: commit commit [[https://github.com/kaushalmodi/ox-hugo/commit/$1][$1]]

# https://scripter.co/latex-in-html/
#+macro: latex @@html:<span class="latex">L<sup>a</sup>T<sub>e</sub>X</span>@@
#+macro: youtube @@html:<div class="org-youtube"><iframe src="https://www.youtube-nocookie.com/embed/$1" allowfullscreen title="YouTube Video"></iframe></div>@@

#+author:

* Preparation
:PROPERTIES:
:EXPORT_FILE_NAME: prep
:EXPORT_DATE: 2021-06-01-08T17:05:38-04:00
:END:
1. Be the root directory for this Hugo site (the directory containing
   =config.toml=).
2. Run
  #+begin_example
  hugo server --port 1111
  #+end_example
3. See the site served on "http://localhost:1111/".
* Index
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: index
:EXPORT_DATE: <2021-06-03 Jeu>
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
* Index2
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:EXPORT_DATE: <2021-06-02 Mer>
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.

* Post 1
:PROPERTIES:
:EXPORT_FILE_NAME: post-1
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:EXPORT_HUGO_SECTION: /posts/
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
* Post 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-2
:EXPORT_DATE: 2020-07-12T17:31:56-04:00
:EXPORT_HUGO_SECTION: /posts/
:END:


$$\int_0^\pi \exp \left( -x^{2} \right)dx $$
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:
This post has no date.

Export this *second* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
* Image / Figure                                                      :image:
** Image links
:PROPERTIES:
:EXPORT_FILE_NAME: image-links
:EXPORT_DATE: 2017-07-15T07:49:44-04:00
:END:
This is some text before the first heading of this post.
*** Unclickable image (works!)
org-mode-unicorn-logo.png
#+begin_src org
# Org source
,#+name: fig__unclickable_image
,#+caption: Don't click this image -- It's not a hyperlink
[[/static/images/org-mode-unicorn-logo.png]]
#+end_src

#+name: fig__unclickable_image
#+caption: Don't click this image -- It's not a hyperlink
[[file:~/ssds/Projets/Hugo/quickstart/static/images/OpticalCorrelationSpectroscopy4.png]]
-----
+To be fixed+ (*Now fixed*): The sub-headings in a post get exported as /Heading 1/
 instead of /Heading 2/.

For example, this sub-section's heading is exported as:
#+begin_example
# Unclickable image
#+end_example
instead of
#+begin_example
## Unclickable image
#+end_example

-----
*Solution*: Above is fixed by setting =HUGO_OFFSET_LEVEL= to 1.

So the sub-heading title and the post title both get the /Heading 1/
tag and look the same size.
*** Clickable link that opens the image (works!)
[[/images/org-mode-unicorn-logo.png][Click here to see the unicorn]]

Do *not* use ~file:~ prefix in the Description if you want the image
link to show up as-is i.e. not be replaced by the image-at-link like
in [[fig__clickable_image_that_opens_the_image]]:

#+begin_src org
# Org source
[[/images/org-mode-unicorn-logo.png][/images/org-mode-unicorn-logo.png]]
#+end_src

[[/images/org-mode-unicorn-logo.png][/images/org-mode-unicorn-logo.png]]

*** Clickable image that opens the image (works!)
Click below image to jump to the unicorn image.

#+begin_src org
# Org source
#+name: fig__clickable_image_that_opens_the_image
#+caption: Click this image -- It's a hyperlink
[[/images/org-mode-unicorn-logo.png][file:../files-to-be-copied-to-static/static/images/unicorn-logo-small.png]]
#+end_src

#+name: fig__clickable_image_that_opens_the_image
#+caption: Click this image -- It's a hyperlink
[[/images/org-mode-unicorn-logo.png][file:../files-to-be-copied-to-static/static/images/unicorn-logo-small.png]]

- NOTE :: =file:= has to be used in the *Description component* of the
          Org link.
**** Similar link with =#+name= specified
Here's a similar link with =#+name= specified.. which should also be
clickable.

#+name: fig__unicorn
[[/images/org-mode-unicorn-logo.png][file:/images/org-mode-unicorn-logo.png]]
**** Same link with =file:= in "link" portion of the Org link too
/Note that the =file:= is needed only in the "description" portion to
create a hyperlinked image that links to an image. But having =file:=
in the "link" portion of the Org link too shouldn't hurt./

Click below image to jump to the unicorn image.

[[file:/images/org-mode-unicorn-logo.png][file:/images/org-mode-unicorn-logo.png]]
*** Link to image outside of standard Hugo =static= directory
:PROPERTIES:
:CUSTOM_ID: path-containing-static
:END:
[[../files-to-be-copied-to-static/static/images/copy-of-unicorn-logo.png]]

If you link to files outside of the Hugo =static= directory, ensure
that the path contains =/static/= if you would like to preserve the
directory structure.

Example translations between outside =static= directory paths to the
copied location inside =static=:
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| Outside =static=                 | Copied-to location inside =static=        | Explanation                                                                                                          |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| =~/temp/static/images/foo.png=   | =<HUGO_BASE_DIR>/static/images/foo.png=   | If the *outside* path has =/static/= in it, the directory structure after that is preserved when copied.             |
| =~/temp/static/img/foo.png=      | =<HUGO_BASE_DIR>/static/img/foo.png=      | (same as above)                                                                                                      |
| =~/temp/static/foo.png=          | =<HUGO_BASE_DIR>/static/foo.png=          | (same as above)                                                                                                      |
| =~/temp/static/articles/zoo.pdf= | =<HUGO_BASE_DIR>/static/articles/zoo.pdf= | (same as above)                                                                                                      |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|

The above path translations (when path contains =static=) hold true
even when inside page bundle pages.
**** Source path does not contain =/static/=
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| Outside =static=         | Copied-to location inside =static=       | Explanation                                                                                                           |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =~/temp/bar/baz/foo.png= | =<HUGO_BASE_DIR>/static/ox-hugo/foo.png= | Here, as the *outside* path does not have =/static/=, the file is copied to the =ox-hugo/= dir in Hugo =static/= dir. |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
- Note :: The =ox-hugo= sub-directory name is because of the default
          value of
          =org-hugo-default-static-subdirectory-for-externals=.
***** Same image, but hyperlinked to itself
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
*** Link to an image with space in filename
This is a link to a file with a space in the filename:
{{{oxhugoissue(376)}}}
[[file:../files-to-be-copied-to-static/foo/unicorn logo.png][Link to ~unicorn logo.png~]]
** Inline hyperlinked and non-hyperlinked images                     :inline:
:PROPERTIES:
:EXPORT_FILE_NAME: inline-images
:END:
This tests the feature added to support proper export syntax for
inline images -- {{{oxhugoissue(125)}}}.
*** Inline non-hyperlinked image
**** No Alt text or any other attributes
This is an inline non-hyperlinked image without alt text or other
attributes: [[/images/org-mode-unicorn-logo.png]].
**** With Alt text
#+attr_html: :alt Inline Non-hyperlinked Image
This is an inline non-hyperlinked image with alt text:
[[/images/org-mode-unicorn-logo.png]].
**** With other HTML attributes
#+attr_html: :width 30
This is an inline non-hyperlinked image with the width attribute:
[[/images/org-mode-unicorn-logo.png]].
*** Non-inline non-hyperlinked image
[[/images/org-mode-unicorn-logo.png]]
*** Inline hyperlinked image
**** No Alt text or any other attributes
This is an inline non-hyperlinked image without alt text or other
attributes:
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]].
**** With Alt text
#+attr_html: :alt Inline Non-hyperlinked Image
This is an inline non-hyperlinked image with alt text:
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]].
**** With other HTML attributes
#+attr_html: :width 30
This is an inline non-hyperlinked image with the width attribute:
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]].
**** With space in the filename
This is an inline hyperlinked image with a space in the filename:
{{{oxhugoissue(277)}}}
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/unicorn%20logo.png]].

*** Non-inline hyperlinked image
 [[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png][file:../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
** Image captions
:PROPERTIES:
:EXPORT_DATE: 2017-07-19
:EXPORT_FILE_NAME: image-captions
:CUSTOM_ID: image-captions
:END:
#+begin_description
Figure captions with markup.
#+end_description

Some text before image.

#+caption: A unicorn! "Something in double quotes"
[[/images/org-mode-unicorn-logo.png]]

Some more text, after image.

#+caption: The /same/ figure *again*, testing [[https://ox-hugo.scripter.co][a link]] too!
[[/images/org-mode-unicorn-logo.png]]

** Image with Hugo =figure= shortcode parameters set using =ATTR_HTML=
:PROPERTIES:
:EXPORT_FILE_NAME: figure-shortcode-and-attr-html
:END:
{{{oxhugoissue(17)}}}
*** Setting =class= parameter
#+attr_html: :class inset
[[/images/org-mode-unicorn-logo.png]]

[[https://github.com/kaushalmodi/ox-hugo/issues/17#issuecomment-313627728][Discussion]]
**** COMMENT Below will not work!
You cannot wrap markdown code inside HTML.

As /rdwatters/ says [[https://discourse.gohugo.io/t/is-it-possible-to-insert-html-code-in-markdown-content/4867/4?u=kaushalmodi][here]],
#+begin_quote
HTML can be part of markdown because HTML-inside-markdown is part of
the spec. That said, remember that the spec disallows markdown nested
inside of HTML. So if you create a div, just make sure everything
inside that div is valid HTML.
#+end_quote

#+begin_export md
<div class="inset">
#+end_export
[[/images/org-mode-unicorn-logo.png]]
#+begin_export md
</div>
#+end_export
*** Setting =alt= parameter
[[https://www.reddit.com/r/emacs/comments/71wy6n/orgmode_as_a_markup_language_does_make_sense_even/dnhqudn/][Reference]]
#+attr_html: :alt Org-mode Unicorn Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting =title= parameter
#+attr_html: :title Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting image caption
The image caption can be set in two ways.
1. Using the Org =#+caption= keyword
2. Using =#+attr_html: :caption my caption=

The =#+caption= is available will get the higher precedence. In the
below image, caption is set using that:

#+include: "./all-posts.org::#image-captions" :only-contents t

Below, the same caption is set using the =#+attr_html= method instead:

Some text before image.

#+attr_html: :caption A unicorn!
[[/images/org-mode-unicorn-logo.png]]

/Enter a new line after the image link so that it's in an "Org
paragraph" that contains just that image. That tells Org that that
=#+attr_html= attribute is associated *only* with that image, and not
to the text that follows that image too./
*** Setting image size
**** Setting =:width= parameter
The image [[https://www.w3schools.com/tags/att_img_width.asp][width]] can be specified in *pixels* using the =:width=
parameter. *The height of the image will be resized proportionally.*

Below image is shown 50 pixels wide.
#+attr_html: :width 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels wide.
#+attr_html: :width 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a width of 1000 pixels! Now the size of this
image is 200px × 200px. But the image will still show up in 1000px ×
1000px size, but obviously heavily pixelated!

#+attr_html: :width 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting =:height= parameter
*NOTE*: Support for specifying =height= parameter to the Hugo =figure=
 shortcut was only added recently in [[https://github.com/gohugoio/hugo/pull/4018][hugo PR #4018]]. So setting this
 parameter will need *hugo v0.31* or later.

-----

The image [[https://www.w3schools.com/tags/att_img_height.asp][height]] can be specified in *pixels* using the =:height=
parameter. *The weight of the image will be resized proportionally.*

Below image is shown 50 pixels tall.
#+attr_html: :height 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels tall.
#+attr_html: :height 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a height of 1000 pixels! Now the size of
this image is 200px × 200px. But the image will still show up in
1000px × 1000px size, but obviously heavily pixelated!

#+attr_html: :height 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting both =:width= and =:height=
The *NOTE* above applies here too.. needs *hugo v0.31* or later.

The figure sizes below are intentionally set /mis-proportionally/ just
for testing.
- =:width 100 :height 200=
  #+attr_html: :width 100 :height 200
  [[/images/org-mode-unicorn-logo.png]]
- =:width 200 :height 100=
  #+attr_html: :width 200 :height 100
  [[/images/org-mode-unicorn-logo.png]]
*** Multiple =ATTR_HTML=
Below in Org source:
#+begin_src org
#+html: <style>.foo img { border:2px solid black; }</style>
#+attr_html: :alt Org mode logo
#+attr_html: :width 300 :class foo
[[https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png]]
#+end_src

Rendered this:

#+html: <style>.foo img { border:2px solid black; }</style>
#+attr_html: :alt Org mode logo
#+attr_html: :width 300 :class foo
[[https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png]]

*NOTE*: We cannot use =:style= in =#+attr_html= because Hugo does not
 /yet/ support a =style= argument in the =figure= shortcode [ [[https://github.com/gohugoio/hugo/blob/488631fe0abc3667355345c7eb98ba7a2204deb5/tpl/tplimpl/template_embedded.go#L22-L37][Source]]
 ].

So using =#+html: <style>.foo img ... </style>= and =#+attr_html: :class
 foo= as shown in the workaround above.
*** Other
Similarly, =:link=, =:attr=, =:attrlink= parameters in =#+attr_html=
are also supported to set the corresponding parameter in the Hugo
=figure= shortcode.
** Inlined SVG                                                   :svg:inline:
:PROPERTIES:
:EXPORT_FILE_NAME: inlined-svg
:END:
#+begin_description
Test inlined SVGs with hyperlinks.
#+end_description
{{{oxhugoissue(253)}}}

- [[http://plantuml.com/svg][Example of generating SVG with hyperlinks using PlantUML]]
- [[https://alligator.io/svg/hyperlinks-svg/][SVGs with hyperlinks need to be inlined]]

Introduce a new ~:inlined t~ HTML attribute.

#+begin_src plantuml :file images/svg-with-hyperlinks.svg :exports results
skinparam svgLinkTarget _parent
start
:[[https://ox-hugo.scripter.co/ ox-hugo homepage]];
stop
#+end_src
#+caption: An SVG with *hyperlinks* -- generated using PlantUML
#+attr_html: :inlined t
#+RESULTS:
[[file:images/svg-with-hyperlinks.svg]]

* Equations                                               :equations:mathjax:
** Inline equations
:PROPERTIES:
:EXPORT_FILE_NAME: equation-latex-frag
:EXPORT_DATE: 2017-07-31
:END:
#+begin_description
Inline and /one-per-line/ equations
#+end_description
- Inline equations are wrapped between =\(= and =\)=.
  - =$= wrapping also works, but it is not preferred as it comes with
    restrictions like "there should be no whitespace between the
    equation and the =$= delimiters".

    So =$ a=b $= will not work (it will look like: $ a=b $), but
    =$a=b$= will work (it will look like: $a=b$).

    On the other hand, both =\(a=b\)= (it will look like: \(a=b\)) and
    =\( a=b \)= (it will look like: \( a=b \)) will work.
- One-per-line equations are wrapped between =\[= and =\]= or =$$=
  delimiters.

For example, below in Org:
#+begin_src text
LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1} \)
#+end_src

will look like this in Hugo rendered HTML:

LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1 }\)

(Don't see this in Markdown, see what it looks after Hugo has
processed it.)

Here's another example, taken from [[https://orgmode.org/manual/LaTeX-fragments.html][(org) LaTeX fragments]].

Below in Org:
#+begin_example
If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]
#+end_example

renders to:

If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]

(Note that the last two equations show up on their own lines.)
** Equations with (r), (c), ..                                    :@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: equations-with-r-c
:END:
#+begin_description
Test to check that &reg;, &copy; and &trade; don't get interpreted
within equations.
#+end_description
{{{oxhugoissue(104)}}}

Below, =(r)= or =(R)= should not get converted to &reg;, =(c)= or
=(C)= should not get converted to &copy;, and =(tm)= or =(TM)= should
not get converted to &trade;:

- $(r)$ $(R)$
- $(c)$ $(C)$
- $(tm)$ $(TM)$


- \( (r) \) \( (R) \)
- \( (c) \) \( (C) \)
- \( (tm) \) \( (TM) \)

Same as above but in /Block Math equations/:

$$ (r) (R) $$
$$ (c) (C) $$
$$ (tm) (TM) $$

\[ (r) (R) \]
\[ (c) (C) \]
\[ (tm) (TM) \]
** Indented equations block                                        :indented:
:PROPERTIES:
:EXPORT_FILE_NAME: indented-equations
:END:
#+begin_description
Testing equations with mathjax --- indented or not.
#+end_description
*** No indentation
\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}
*** With indentation
{{{oxhugoissue(128)}}}

    \begin{equation}
    \label{eq:2}
    C = W\log_{2} (1+\mathrm{SNR})
    \end{equation}

Above equation (/{{{latex}}} environment/) is the same as the first
one, but:
- It is indented in the Org source.

  /This test verifies that the indentation is auto-removed in the
  exported Markdown file./
- It has a different label (=\label{eq:2}= instead of =\label{eq:1}=);
  Mathjax *requires the equation labels to be unique*.
** Blackfriday-specific escaping in equations :escaping:@upstream:blackfriday:
:PROPERTIES:
:EXPORT_FILE_NAME: equations-bf-escaping
:END:
#+begin_description
Test to check that the backslashes are correctly escaped.
#+end_description
{{{oxhugoissue(138)}}}
*** =\|= → =\\|=
$$
C(w,b) = \frac{1}{2n} \sum_x{{\|y(x)-a\|}^2}
$$
*** =\\= at EOL → =\\\\\\=
\begin{align}
a^1  &= x \\
a^2  &=  σ(W^2a^1 + b^2) \\
a^3  &=  σ(W^3a^2 + b^3) \\
⋯ \\
a^L  &= σ(W^La^{L-1} + b^L) \\
y  &= a^L
\end{align}
**** Same as above, but without space before the =\\= at EOL
\begin{align}
a^1  &= x\\
a^2  &=  σ(W^2a^1 + b^2)\\
a^3  &=  σ(W^3a^2 + b^3)\\
⋯\\
a^L  &= σ(W^La^{L-1} + b^L)\\
y  &= a^L
\end{align}
*** =\{= → =\\{=, =\}= → =\\}=
{{{oxhugoissue(258)}}}

\begin{equation}
\phi_j(x) = \mathrm{exp}\left\{ - \frac{(x - \mu_j)^2}{2s^2} \right\}
\end{equation}
*** ~x <0 \\~
{{{oxhugoissue(348)}}}

\begin{equation}
\begin{cases}
u_t = ku_{xx} \\
u(x,0) = T_1 , & x <0 \\
u(x,0) = T_2 , & x > 0
\end{cases}
\end{equation}
*** ~[ .. ]( .. )~ in a LaTeX equation
{{{oxhugoissue(349)}}}

In the below equation, without the escaping hack, the Markdown parser
gets fooled into thinking that ~[ e^{at} \right](z)~ is a Markdown
link!

\begin{equation}
\mathcal{L}\left[ e^{at} \right](z) = \frac{1}{z-a}
\end{equation}

* Source blocks                                                   :src_block:
** Code fence                                                    :code_fence:
*** Code-fenced source blocks (default behavior)
:PROPERTIES:
:EXPORT_FILE_NAME: code-fenced-src-blocks-default
:EXPORT_DATE: 2017-07-31
:END:
The source blocks are code-fenced by default.

#+include: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks
:EXPORT_DATE: 2017-07-13T17:49:22-04:00
:END:
Here the source blocks are explicitly set to be code-fenced by setting
the =EXPORT_HUGO_CODE_FENCE= property to =t=.

#+include: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks with backticks                      :backticks:
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks-with-backticks
:END:
This code block contains a fenced code block with 4 backticks:
#+begin_src md
````emacs-lisp
(message "Hello")
````
#+end_src

This code block contains a fenced code block with 3 backticks:
#+begin_src md
```emacs-lisp
(message "Hello again")
```
#+end_src

This code block contains no backticks:
#+begin_src emacs-lisp
(message "Hello again x2")
#+end_src

This code block again contains a fenced code block with 4 backticks:
#+begin_src md
````emacs-lisp
(message "Hello again x3")
````
#+end_src

This code block contains a fenced code block with 6 backticks:
#+begin_src md
``````emacs-lisp
(message "Hello again x4")
``````
#+end_src

This code block again contains a fenced code block with 3 backticks:
#+begin_src md
```emacs-lisp
(message "Hello again x5")
```
#+end_src

This code block once again contains no backticks:
#+begin_src emacs-lisp
(message "Hello again x6")
#+end_src
** Highlight Shortcode                                  :highlight:shortcode:
*** Source blocks with =highlight= shortcode
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:EXPORT_FILE_NAME: highlight-shortcode-src-blocks
:EXPORT_DATE: 2017-07-31
:END:
Note that to disable the code fence option, the value portion of the
property needs to be left *empty* instead of setting to =nil=!
#+begin_example
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:END:
#+end_example
#+include: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
*** Source blocks with line number annotation
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-line-numbers
:END:
- [[https://orgmode.org/manual/Literal-examples.html][Org reference]]
- [[https://gohugo.io/content-management/syntax-highlighting/][Hugo =highlight= shortcode with line numbers]]
**** Cases
:PROPERTIES:
:CUSTOM_ID: source-block-line-number-cases
:END:
***** Default new line number start
****** Org source
#+begin_src org :noweb yes
<<src-block-n-default-start>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-start>>
#+end_src
***** Specify new line number start
****** Org source
#+begin_src org :noweb yes
<<src-block-n-custom-start>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-start>>
#+end_src
***** Default continued line numbers
****** Org source
#+begin_src org :noweb yes
<<src-block-n-default-continue>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-continue>>
#+end_src
***** Specify continued line numbers jump
****** Org source
#+begin_src org :noweb yes
<<src-block-n-custom-continue>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-continue>>
#+end_src
*** Source blocks with highlighting
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-highlighting
:CUSTOM_ID: source-blocks-with-highlighting
:END:
**** Without line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-no-linenums
:END:
****** Org source
#+begin_src org :noweb yes
<<src-block-hl-without-n>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-without-n>>
#+end_src
Above highlighting might look weird as the highlighting spans the full
page/container width. This could be either called a bug in Hugo, or
the HTML limitation.

A workaround is below.. *use line numbers too!*.
****** Highlighting only 1 line
******* Org source
#+begin_src org :noweb yes
<<src-block-hl-without-n-just-1-line>>
#+end_src
******* Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-without-n-just-1-line>>
#+end_src
**** With line numbers *not* starting from 1
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums-not-starting-from-1
:END:
With line numbers enabled, the highlighting is limited to the width of
the HTML table rows (because =ox-hugo= sets the =linenos=table= option
in the =highlight= shortcode when line numbers are enabled).

- Note 1 :: When using both, switches (like =-n=), and header args
            (like =:hl_lines=), the _switches have to come first_.
- Note 2 :: The line numbers in the value for =:hl_lines= parameter is
            always with the starting line number reference of 1. That
            has no relation with the value of the line numbers
            displayed using the =-n= or =+n= switches!
****** Org source
#+begin_src org :noweb yes
<<src-block-hl-with-n-not-1>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n-not-1>>
#+end_src
**** With line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums
:END:
****** Org source
#+begin_src org :noweb yes
<<src-block-hl-with-n>>
#+end_src
****** Output
#+begin_src org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n>>
#+end_src
** Source block with caption                                        :caption:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-caption
:END:
#+caption: Prefix value in =local.mk=
#+begin_src makefile
prefix = /dir/where/you/want/to/install/org # Default: /usr/share
#+end_src

#+caption: Hello --- Caption with em-dash -- and -- en-dash
#+begin_src emacs-lisp
(message "hello")
#+end_src
** Source and example blocks with list syntax in a list
*** Source blocks                                    :src_block:lists:hyphen:
**** Source block with list syntax in a list          :@upstream:blackfriday:
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-with-list-syntax
:END:
An upstream bug in {{{bfissue(239)}}} caused fenced code blocks in
lists to not render correctly if they contain Markdown syntax
lists. =ox-hugo= provides a hack to get around that bug.

Below is an example of such a case:

- List item 1
  #+begin_src md
  - List item 1.1 in code block
  - List item 1.2 in code block
  #+end_src
- List item 2
  #+begin_src md
  + List item 2.1 in code block
  + List item 2.2 in code block
  #+end_src
- List item 3

Another such example, but with space before a hyphen in source block:

1. First item
   #+begin_src yaml
   ports:
     foo: bar
   #+end_src
2. Second item
   #+begin_src yaml
   ports:
    - port: 80
   #+end_src
3. Third item
**** Source block without list syntax in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-but-no-list-syntax
:END:
This case is not affected by /Blackfriday/ [[https://github.com/russross/blackfriday/issues/239][Issue #239]] as the fenced
code block does not have Markdown syntax lists.
- List item 1
  #+begin_src md
  ,*abc*
  /def/
  =def=
  #+end_src
- List item 2
**** Source block with list syntax but not in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: src-block-outside-list-with-list-syntax
:END:
#+begin_src md
- list 1
#+end_src
*** Example blocks                               :lists:hyphen:example_block:
**** Example block with list syntax in a list         :@upstream:blackfriday:
:PROPERTIES:
:EXPORT_FILE_NAME: list-has-example-block-with-list-syntax
:END:
An upstream bug in {{{bfissue(239)}}} caused fenced code blocks in
lists to not render correctly if they contain Markdown syntax
lists. =ox-hugo= provides a hack to get around that bug.

Below is an example of such a case:

- List item 1
  #+begin_example
  - List item 1.1 in code block
  - List item 1.2 in code block
  #+end_example
- List item 2
  #+begin_example
  + List item 2.1 in code block
  + List item 2.2 in code block
  #+end_example
- List item 3

Another such example, but with spaces before the hyphens in example
blocks:

- List item 1
  #+begin_example
   - List item 1.1 in code block
   - List item 1.2 in code block
  #+end_example
- List item 2
  #+begin_example
    + List item 2.1 in code block
    + List item 2.2 in code block
  #+end_example
- List item 3
** Org Babel Results    :babel:results:indentation:example_block:fixed_block:
:PROPERTIES:
:EXPORT_FILE_NAME: org-babel-results
:END:
#+begin_description
Testing the export of Org Babel ~#+results:~ blocks with and without
wrapping with HTML attributes.
#+end_description
*** "Fixed block" Results block
Below also tests that the indentation in *results* blocks is
preserved.

#+begin_src python :exports both :results output
str = 'a\tbc'
print(str[1:])
#+end_src

#+results:
: 	bc

The whitespace before "bc" in the results block above should be
preserved.
**** "Fixed block" Results block with ~#+attr_html~
#+begin_src python :exports both :results output
str = 'd\tef'
print(str[1:])
#+end_src

#+attr_html: :class results-fixed-block
#+attr_css: :color blue
#+results:
: 	ef

Above results block will be in _blue_ text.
*** "Example block" Results block
#+begin_src nim :exports both :results output
echo "abc\ndef\nghi\njkl\nmno\npqr\nstu\nvwx\nyz0\n123\n456\n789"
#+end_src

#+results:
#+begin_example
abc
def
ghi
jkl
mno
pqr
stu
vwx
yz0
123
456
789
#+end_example
**** "Example block" Results block with ~#+attr_html~
#+begin_src nim :exports both :results output
echo "ABC\nDEF\nGHI\nJKL\nMNO\nPQR\nSTU\nVWX\nYZ0\n123\n456\n789"
#+end_src

#+attr_html: :class results-example-block
#+attr_css: :color green
#+results:
#+begin_example
ABC
DEF
GHI
JKL
MNO
PQR
STU
VWX
YZ0
123
456
789
#+end_example

Above results block will be in _green_ text.
** Indented source block :indented:lists:code_fence:highlight:src_block:@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-indented
:END:
#+begin_description
Test that indented source blocks, and also the ones in lists export
fine.
#+end_description

Some content.

#+begin_src emacs-lisp
(defun small-shell ()
  (interactive)
  (split-window-vertically)
  (other-window 1)
  (shrink-window (- (window-height) 12))
  (ansi-term))
#+end_src
*** Code blocks in list using code fences
Reference: {{{hugoissue(4006)}}}

- List item 1
  #+begin_src emacs-lisp
  (message "I am in list at level-1 indentation")
  #+end_src
  - List item 1.1
    #+begin_src emacs-lisp
    (message "I am in list at level-2 indentation")
    #+end_src
    - List item 1.1.1
      #+begin_src emacs-lisp
      (message "I am in list at level-3 indentation")
      #+end_src
  - List item 2.1
    #+begin_src emacs-lisp
    (message "I am in list back at level-2 indentation")
    #+end_src
- List item 2
  #+begin_src emacs-lisp
  (message "I am in list back at level-1 indentation")
  #+end_src

#+begin_src emacs-lisp
(message "And now I am at level-0 indentation")
#+end_src
*** Code blocks in list using ~highlight~ shortcode
Reference: {{{hugoissue(4717)}}}, {{{oxhugoissue(161)}}}

This is an *upstream* bug in ~hugo~ as of 2018-05-12. The issues is
that when the code blocks in ~highlight~ shortcodes are inserted at
the required indentation levels in lists.. so that they get rendered
*in* the list at *that* indentation level, those indentations are not
removed by ~hugo~, and thus become part of those code blocks.

Also, related to this issue, it can be seen that all such indented
code blocks have an empty second line too, probably just due to the
unremoved indentation on the last line of those code blocks.

In the above section, the same code blocks are code-fenced instead of
using ~highlight~ shortcode, and the extra indentation is not seen
there.

- List item 1
  #+begin_src emacs-lisp -n
  (message "I am in list at level-1 indentation")
  #+end_src
  - List item 1.1
    #+begin_src emacs-lisp -n
    (message "I am in list at level-2 indentation")
    #+end_src
    - List item 1.1.1
      #+begin_src emacs-lisp -n
      (message "I am in list at level-3 indentation")
      #+end_src
  - List item 2.1
    #+begin_src emacs-lisp -n
    (message "I am in list back at level-2 indentation")
    #+end_src
- List item 2
  #+begin_src emacs-lisp -n
  (message "I am in list back at level-1 indentation")
  #+end_src

#+begin_src emacs-lisp -n
(message "And now I am at level-0 indentation")
#+end_src
** Markdown source block with Hugo shortcodes                     :shortcode:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-md-with-hugo-shortcodes
:EXPORT_HUGO_CODE_FENCE: t
:END:
*** Shortcodes escaped
The =figure= shortcodes in the two Markdown source code blocks below
should *not* be expanded.. they should be visible verbatim.

- {&lbrace;< .. >}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-without-markdown][Shortcodes without Markdown]]
- {&lbrace;% .. %}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-with-markdown][Shortcodes with Markdown]]
**** Code block using code fences
#+begin_src md
{{< figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" >}}
{{% figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" %}}
#+end_src
**** Code block using =highlight= shortcode
Here, the =-n= switch is added to the Org source block to
auto-enable[fn:4] using the =highlight= shortcode.
#+begin_src md -n
{{< figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" >}}
{{% figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" %}}
#+end_src
*** Shortcodes *not* escaped
The =figure= shortcodes in the below example block *should* be
expanded.. you should be seeing little unicorns below.
#+begin_example
{{< figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" >}}
{{% figure src="https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png" %}}
#+end_example
Above a =#+begin_example= .. =#+end_example= block is chosen
arbitrarily. The Hugo shortcodes will remain unescaped in *any*
source/example block except for _Markdown source blocks_ (annotated
with =md= language).
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
** Source blocks with ATTR_HTML                      :attr___html:attr___css:
:PROPERTIES:
:EXPORT_FILE_NAME: source-blocks-with-attr-html
:END:
Some text.

#+attr_html: :class indent-block
#+attr_css: :padding-left 50px
#+begin_src emacs-lisp
(message (mapconcat #'identity
                    '("Hello," "how" "are" "you?")
                    " "))
#+end_src

Some more text.
** Org Source Block via Pygments                          :pygments:noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: org-source-block-pygments
:END:
/This test case is not important after Hugo 0.28 as this was a
workaround for a limitation in the Pygments syntax highlighter. Hugo
0.28 onwards, the default syntax highlighter is Chroma, which does not
have that limitation, and thus no need for this workaround./
-----
Test case for the case where user has set
=org-hugo-langs-no-descr-in-code-fences= to a list containing the
element =org=.

/As this variable is dependent on user's config, this post is not set
to be exported by default./

The [[https://discourse.gohugo.io/t/fenced-code-block-with-language-unsupported-by-pygments/7710][issue]] with Hugo will be seen if _all_ of the below are true:
- =pygmentsCodeFences = true= *and* =pygmentsUseClassic = true= (Hugo
  ≥ 0.28 -- default value is =false=) are set in the Hugo site
  =config.toml=.
- A source block's language is set to one that's not supported by
  Pygments (like [[https://bitbucket.org/birkenfeld/pygments-main/issues/719/wishlist-support-org][org]], and thus the below example with source code
  language set to =org=).
- =org-hugo-langs-no-descr-in-code-fences= is set to a value not
  containing that language descriptor (=org= in this case).
#+begin_src org
# Org comment
Export this post after setting
=org-hugo-langs-no-descr-in-code-fences= to =(org)= and temporarily
removing the =noexport= tag.
#+end_src

* Pandoc Citations                                         :pandoc:citations:
:PROPERTIES:
:EXPORT_HUGO_PANDOC_CITATIONS: t
:EXPORT_BIBLIOGRAPHY: cite/bib/bib1.bib, cite/bib/bib2.bib
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nocite '(@giovanelli2016 @eilan2016)
:EXPORT_HUGO_PAIRED_SHORTCODES: %mdshortcode myshortcode
:END:
** Citations Example (TOML)                                            :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: citations-example-toml
:END:
#+begin_description
Test the parsing of Pandoc Citations, while also testing that ox-hugo
exported Markdown doesn't get broken -- TOML front-matter.
#+end_description
{{{oxhugoissue(175)}}}
*** Section 1
Here is a test example file with an in-text citation where someone
important says something important (e.g. @loncar2016). And here is
another bit of blah with a footnote citation.[fn:5]

See [[#citation-example-toml-section-2]].
*** Section 2
:PROPERTIES:
:CUSTOM_ID: citation-example-toml-section-2
:END:
Content in section 2.
*** Testing random Hugo shortcode
#+begin_mdshortcode
Text containing *Markdown*
#+end_mdshortcode
Some text.
#+begin_myshortcode
Text not containing *Markdown*
#+end_myshortcode
*** Testing ox-hugo inserted HTML div tags
#+begin_foo
*bold* /italics/
#+end_foo
*** Testing tables
|----------+----------+----------|
| Header 1 | Header 2 | Header 3 |
|----------+----------+----------|
| a        | b        | c        |
| d        | e        | f        |
|----------+----------+----------|
*** Testing fenced code blocks
#+begin_src emacs-lisp
(message "Hello World")
#+end_src
*** Lists Galore
- item1 in list
- item2 in list. The following list is in a separate list body.


- L1 -- foo1
- L1 -- foo2
  - L2 -- bar1
  - L2 -- bar2
    + L3 -- baz1
    + L3 -- baz2
      - L4 -- zoo1
      - L4 -- zoo2
        1. L5 -- numbered1
        2. L5 -- numbered2
      - L4 -- zoo1
      - L4 -- zoo2
    + L3 -- baz1
    + L3 -- baz2
  - L2 -- bar1
  - L2 -- bar2
- L1 -- foo1
- L1 -- foo2
** Citations Example (YAML)                                            :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:EXPORT_FILE_NAME: citations-example-yaml
:END:
#+begin_description
Test the parsing of Pandoc Citations, while also testing that ox-hugo
exported Markdown doesn't get broken -- YAML front-matter.
#+end_description
{{{oxhugoissue(175)}}}
*** Section 1
Here is a test example file with an in-text citation where someone
important says something important (e.g. @loncar2016). And here is
another bit of blah with a footnote citation.[fn:5]

See [[#citation-example-yaml-section-2]].
*** Section 2
:PROPERTIES:
:CUSTOM_ID: citation-example-yaml-section-2
:END:
Content in section 2.
** Citation Linking                                          :link_citations:
:PROPERTIES:
:EXPORT_FILE_NAME: citation-linking
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :link-citations true
:END:
#+begin_description
Auto-link citations from post body to the citation in References
section.
#+end_description
Here is a test example file with an in-text citation where someone
important says something important (e.g. @loncar2016). And here is
another bit of blah with a footnote citation.[fn:5]
** Citation Forms                                                     :forms:
:PROPERTIES:
:EXPORT_BIBLIOGRAPHY: cite/bib/bib3.bib
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :link-citations true
:END:
*** Citation Forms Test Body
:PROPERTIES:
:CUSTOM_ID: citation-forms-test-body
:END:
**** Citations in square brackets
The citations withing square brackets will be rendered within
parentheses.
#+begin_src org
Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].
#+end_src
Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].

#+begin_src org
Blah blah [@doe99, pp. 33-35, 38-39].
#+end_src
Blah blah [@doe99, pp. 33-35, 38-39].

#+begin_src org
Blah blah [@smith04; @doe99].
#+end_src
Blah blah [@smith04; @doe99].
**** Citations with author name suppressed
A minus sign (~-~) before the ~@~ will suppress mention of the author
in the citation. This can be useful when the author is already
mentioned in the text.
#+begin_src org
Smith says blah [-@smith04].
#+end_src
Smith says blah [-@smith04].
**** In-text citations (no square brackets)
#+begin_src org
@smith04 says blah.
#+end_src
@smith04 says blah.

#+begin_src org
@smith04 [p. 33] says blah.
#+end_src
@smith04 [p. 33] says blah.
**** Actual citations for this test post :)
See @addCite17; @rmdCitations for more.
*** Citation Forms
:PROPERTIES:
:EXPORT_FILE_NAME: citation-forms
:END:
#+begin_description
Demonstrating different styles / forms of citations
#+end_description
#+include: "./all-posts.org::#citation-forms-test-body" :only-contents t
*** Citation Forms (Custom CSL)                                   :forms:csl:
:PROPERTIES:
:EXPORT_FILE_NAME: citation-forms-apa-csl
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :csl cite/csl/apa.csl
:END:
#+begin_description
Demonstrating different styles / forms of citations using APA CSL
#+end_description
#+include: "./all-posts.org::#citation-forms-test-body" :only-contents t

*Compare the References section below with [[/posts/citation-forms/#references][that]] when using the default
 CSL.*
** No Citations                                                        :none:
:PROPERTIES:
:EXPORT_FILE_NAME: citations-none
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nocite '()
:END:
This post has Pandoc Citations parsing enabled, but has no actual
citations.
** Invalid Nocites                                           :invalid:nocite:
:PROPERTIES:
:EXPORT_FILE_NAME: invalid-nocites
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nocite '(@foo @bar)
:END:
This post has citations ~@foo~ and ~@bar~ listed in ~nocite~
meta-data. But they are invalid as they don't exist in any of the
bibliography files.

But that generates neither a Pandoc warning nor error.

As the final Pandoc output Markdown ends up with *no* references, the
Pandoc output is discarded, and the original ~ox-hugo~ output is used
instead.
** Citations with captions                          :caption:figure:plantuml:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: citations-with-captions
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2018-08-19
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :link-citations true
:END:
#+begin_description
This test tests the following:
- Pandoc leave the HTML ~span~ tags as-is.
- Pandoc does not escape the ~<~ in the ~figure~ shortcodes with
  captions (in general: ~{{< ..>}}~ shortcodes that could wrap across
  lines).
- While Pandoc auto-wraps the re-written Markdown, it also wraps the
  ~{{< .. >}}~ shortcodes. The test checks that such "wrapped
  shortcodes" get unwrapped.
#+end_description
{{{oxhugoissue(191)}}}

#+name: code__plantuml_nested_boxes
#+caption: Nested Boxes using PlantUML
#+begin_src plantuml :file images/citations-with-captions/nested-boxes.svg :eval yes :exports both
rectangle "<html>, <body>, etc." as a  {
  rectangle "<div>..." as b #antiquewhite {
    rectangle "<video>...\n\n\n" as c
  }
}
#+end_src
# The order of #+caption and #+RESULTS is important here.
# Ref: https://emacs.stackexchange.com/a/12155/115
#+caption: PlantUML generated figure showing nested boxes
#+RESULTS: code__plantuml_nested_boxes
[[file:images/citations-with-captions/nested-boxes.svg]]
** Disabling Pandoc citations in a subtree                          :disable:
*** Disabling Pandoc citations in a subtree (empty string)
:PROPERTIES:
:EXPORT_FILE_NAME: disabling-pandoc-citations-in-a-subtree-empty-string
:EXPORT_HUGO_PANDOC_CITATIONS:
:END:
#+begin_description
Test that ~:EXPORT_HUGO_PANDOC_CITATIONS:~ disables Pandoc citations
in a subtree.
#+end_description
The Nocites in the front-matter do not get rendered as citations.
*** Disabling Pandoc citations in a subtree (nil string)
:PROPERTIES:
:EXPORT_FILE_NAME: disabling-pandoc-citations-in-a-subtree-nil-string
:EXPORT_HUGO_PANDOC_CITATIONS: nil
:END:
#+begin_description
Test that ~:EXPORT_HUGO_PANDOC_CITATIONS: nil~ disables Pandoc
citations in a subtree.
#+end_description
The Nocites in the front-matter do not get rendered as citations.
* test org-ref
:PROPERTIES:
:EXPORT_FILE_NAME: test-org-ref
:EXPORT_DATE: 2017-07-31
:END:

#+BIBLIOGRAPHY: /Users/bertrand/ssds/Projets/Biblio/BibFiles/Encours.bib

line, while the location where the rendered bibliography should be placed can be indicated by a cite:ZeninariJQSRT2007a

#+BIBLIOGRAPHY: here
* Test self publi
:PROPERTIES:
:EXPORT_FILE_NAME: test-self-publi
:EXPORT_DATE: <2021-06-09 Mer>
:EXPORT_OPTIONS: h:3
:EXPORT_HUGO_LEVEL_OFFSET: -1
:END:

#+TITLE: Wide band (2.5 GHz) infrared heterodyne spectrometer
#+BIBLIOGRAPHY: /Users/bertrand/ssds/Projets/Biblio/BibFiles/Encours.bib



** Introduction
Infrared heterodyne spectrometers have been successfully used for astronomical
and geophysical applications (cite:BetzAJ1976a,BetzAJ1981a,KostiukIP1976a,KostiukJMS1981a). The Reims GSMA laboratory has developed
for several years high resolution heterodyne receivers for atmospheric ozone
studies. The local oscillator was a $\ce{CO2}$ laser and the spectral range was about
1.5 GHz.

The development of a wider band heterodyne receiver has many
advantages. First, it enables us to study lines which were out of range of the
first apparatus. For the same reason, we use now either a $\ce{^{12}C^{16}O2}$ or
a \ce{^{12}C^{18}O2}, laser as local oscillator. We also need this wide band
spectrometer for recording ground-based atmospheric absorption spectra. For
those spectra, the sun is used as a source and the absorption by the low
altitude layers is very wide : because of the pressure broadening. In order to obtain the 100% transmission, we must record the whole line profile. A 2 GHz scan is, at least necessary to fulfill this condition.

** Heterodyne spectrometer : description
In order to obtain a 2.5 GHz bandwidth, three main elements with this bandwidth
must be associated :
- A fast photodiode which acts as an optical mixer
- Low noise, wide band amplifiers, in order to work at a sufficient level
- RF analysis and detection system.

A short description of these elements and of the data acquisitions System follows
below.

*** Optical part
This part has been previously described, and so only a short description
necessary for the understanding of this work will be given here (cite:ThiebeauxAPPLC1988a,CourtoisIJIMW1984a).
The beams of the local oscillator and of two thermal sources are focused
onto a photodiode, which acts as an infrared mixer.
The photodiode is one of the most important element of the spectrometer. The
bandwidth of the apparatus is generally limited by the diode bandwidth.
Therefore the choice of this element is particularly important. We use a reverse-
biased, fast HgCdTe photodiode from S.A.T. (Société Anonyme de
Télécommunications, France). This mixer is set in a down-looking special
laboratory made Dewar. All connections are made by using as short as possible
coaxial cables. It works at liquid nitrogen temperature_ The bandwidth is about
3 GHz for a bias between 1.3 and 2 Volts.
Our set-up is a double beam heterodyne system. The two thermal beams are chopped
at different frequencies. High precision mechanical choppers (EG&G model 197)
are used. One of the beam is for reference and the other for measurement.
Transmission is proportional to the ratio of the two signals. This technique
suppresses low frequency drift of the spectrometer. For laboratory
studies, an absorption cell is put on the second beam. For atmospheric studies, the
measurement beam is obtained with a sun tracker (cite:DelahaigueIP1988a).

*** Radio frequency analysis
We first use two wide band and low noise preamplifiers which were specially
studied for this experiment (Micronic - France). The first one has an incorporated bias tee.
Their characteristics are :
- 70 dB total gain
- 2.5 dB noise
- 12.7 GHz bandwidth.
This amplification allows the analyzer to work at sufficient level.
The analyzer is heterodyne type. It uses an RF mixer, a fixed filter and a local
oscillator (see figure ref:fig:1). The mixer works as following " for an input
$\nu_{RF}$ frequency signal and a $\nu_{LO}$ frequency local oscillator signal,
the output signal frequency is equal to $\nu_{IF}=\|\nu_{RF}-\nu_{LO}\|$. With a
filter centered at $f_{IF}$, the analysis of the RF signal between 0 and
$f_{IF}$ is obtained by sweeping the local oscillator frequency
from $f_{IF}$ to  $2 \times  f_{IF}$. The resolution of the RF analyzer is then
equal to the bandwidth B of the filter.
The RF local oscillator is a Marconi 2042 synthesizer. It works between 10 kHz
and 5.4GHz. Frequency and output level accuracies are widely sufficient for our
experiment. The maximum frequency 5.4 GHz value leads to the choice of a 2.7 GHz
filter. This synthesizer is completely controlled by a micro-computer via IEEE
port.
Several RF mixers were tested in order to obtain the best results. It was
difficult to find a mixer which had sufficient bandwidth on the three ports (IF, RF,
LO). We finally decided to use the Anzac MDC 154 (IF 0.1 - 3000 MHz, RF, LO 0.3- 5 GHz). The upper limit of the mixer on the LO port is slightly to low.
The last part of the analyzer is composed of a selective amplifier centered at 2.7
GHz (Micronic) and a four sections cavity filter (Trilithic 2.7 GHz, 10 MHz). The
detection of the RF signal is done by a RF diode Texscan CD51 operated in the
square-law mode. This type of analyzer has several advantages. The apparatus
function is well known and given by the filter response. The resolution is equal to
the width of this response. With a 10 MHz filter, the resolution is at least 5 times
lower than the Doppler line width of the studied molecules.

#+CAPTION: Scheme of the RF analyzer label:fig:1
#+ATTR_LaTeX: width=0.75\columnwidth
[[file:./figures/1995ParvitteIJIMWafig1.png]]
*** Data acquisition
The RF diode gives a signal proportional to the incident power on the of
photodetector. We use two lock-in amplifiers (model EGG 5301) to discriminate
the reference and measurement signals. Each one is adjusted on the modulation
frequency of one of the thermal beams. The lock-in amplifiers are used with a
time constant $\tau$ equal to 100 ms and a rollof rate of 12 dB/Oct. The DC output
signals between 0 and 10 volts are then digitized. In order to have high dynamic
and high resolution, we use for each channel a voltage to frequency converter (0 -
10 Volts, 10 MHz) and a counter. The numerical integration is controlled by an
accurate 4MHz quartz oscillator. The integration time is generally about 1 to 10
seconds. Pressure and temperature in the gas cell arc simultaneously recorded.
The laboratoy developed software controls data acquisition and the local oscillator
frequency. Parameters such as frequency step of the LO, number of steps,
integration time are fixed with the computer. We can either record single
spectra or accumulate them. The system speed is only limited by file response
time of the synthesizer which is IEEE controlled. The results of the
measurements are directly visualized on the screen of the computer.

** Results

*** Test of the photomixer
Many methods for measuring the bandwidth of a photodetector areavailable. The
best known is the measure of the noise spectrum of the detector when it is
illuminated by a laser. Another consists in recording the beat signal of a local
oscillator beam and a frequency-shifted beam. The shifted beam is often obtained
by using all acousto-optic modulator (cite:VerieIJQE1972a). As tunable diode
lasers emitting in the 10 µm region are available in our laboratory., we decided
to use the TDL's beam as the frequency-shifted beam. In this case, the radiation
of the \ce{CO2} laser and of the TDL are superimposed on the HgCdTe photodiode.
The frequency of the signal is then equal to the difference between the \ce{CO2}
laser line frequency and the TDL frequency.
For a fixed value of the injection current of the diode, the spectral width of
this signal can be measured and is about 50 MHz. This value is negligible in
comparison with the total bandwidth of the detector. The beat signal is recorded
for different value of the diode frequency. This measurement gives a good
description of the photomixer response. The two following conditions are
required : the diode emission must be monomode and there must be no mode hop on an
interval greater than the double of the bandwidth around the frequency of the
\ce{CO2} laser line.
The diodes we use are PbSnSe diodes: working between 20 and 40 K. They are Set
in a closed-cycle helium cooler. The cooler and the current driver are from
Mütek (Germany). The diode is operated in a multilongitudinal mode. A grating monochromator selects one mode.
The frequency of the diode is swept around the \ce{CO2} laser line frequency by tuning
the injection current. The fringes of a spherical Fabry-Perot are simultaneously
recorded so we could have a relative scale frequency versus injection current.
The confocal etalon is a 25 cm one with an invar structure. It takes place in a vacuum
cell and its sharpness is about 40 when illuminated by a well stabilized
\ce{CO2} laser. The free spectral range is 0.01 cm-1.
Measurements have been done near the 9P20 line of \ce{^{12}CO2} laser (1046.85 cm-1). Figure ref:fig:2 shows an example of measurement.
It has been obtained with the infrared mixer and the preamplifiers. The frequency scale is in megahertz
and the signal scale is linear.
The total width of the signal is approximately of 0.185 cm-1. This value correspond to a bandwidth of 2.7 MHz.
The receiver's bandwidth is therefore limited by the amplifiers bandwidth.
The peak is obtained when the diode frequency is close to the laser line
frequency. It seems to be due to a peak response of the preamplifiers
for low frequency (< 50 MHz).

#+CAPTION: ! 1 beat signal of the \ce{CO2} laser and a TDL - 2 confocal etalon fringes label:fig:2
#+ATTR_LaTeX: scale=0.75
[[file:figures/1995ParvitteIJIMWafig2.png]]

*** First spectra
In order to check this new apparatus, we decided to record an absorption
line shifted from more than 2 GHz from the local oscillator.
The Ammonia molecule seems to be a good choice for these tests.
The research of coincidences between \ce{NH3} and the \ce{CO2} laser lines in the Hitran
Datatabase (cite:RothmanJQSRT1992a) leads to only a few possibilities. We chose to record the \ce{NH3}
R(5,1) line near 9 µm  (see Table ref:tab:1). The line's center is shifted from - 2343 MHz
from the 9P10 \ce{CO2} laser line. As we need at least 200 MHz on both sides to
record the whole line profile, this line is at the limit of the 2.5 GHz heterodyne
receiver.
We present in figure 3 one of the recorded spectra. It has been recorded with
approximately 2 torrs of \ce{NH3} and a path length of 1.60 meter.
The characteristics are:
- 200 points
- 3 MHz steps
- 10 s for each point (total time: 35 min.).

The most important element we can see on this spectrum is that the line position is
slightly different from the expected value. The line center is found at - 2100 MHz
\pm 5 MHz from the 9P10 \ce{CO2}_laser line. (Table ref:tab:2).This value is coherent with
previous measurements (cite:SasadaJMS1986a).

#+CAPTION: Position and intensity of the R(5,1) line of Ammonia (Hitran database 1992) label:tab:1
| frequency | intensity         |
| (cm-1)    | (cm-2/(mol.cm-1)) |
|-----------+-------------------|
| 1055.5470 | 9.33E-22          |

#+CAPTION: Position of the R (5 1) line of \ce{NH3} label:tab:2
| Source                 | wave number | shift withthe 9P 10line of \ce{CO2} |
|                        |      (cm 1) |                               (MHz) |
|------------------------+-------------+-------------------------------------|
| cite:RothmanJQSRT1992a |   1055.5470 |                               -2343 |
| cite:SasadaJMS1986a    |   1055.5540 |                               -2130 |
| This work              |   1055.5550 |                               -2100 |


#+CAPTION:  Heterodyne spectrum of the R(5,1) Ammonia line label:fig:3
#+ATTR_LaTeX: scale=0.75
[[file:figures/1995ParvitteIJIMWafig3.png]]

** Conclusion
A double beam heterodyne spectrometer with 2.5 GHz bandwidth was built in Reims.
The receiver's bandwidth was measured by heterodyning radiation from a \ce{CO2},laser with the radiation from a tunable diode laser.
The spectrometer was used for laboratory studies. Ammonia absorption spectra were recorded. Line positions in agreement with other works were measured.
This apparatus will soon be used for atmospheric ozone studies in
association with an isotopic \ce{^{12}C^{18}O_2} laser to avoid atmospheric
\ce{CO2} absorption.


#+BIBLIOGRAPHY: here




